<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/themes/base/jquery-ui.css" type="text/css" />
<link rel="stylesheet" href="/javascripts/plupload/jquery.ui.plupload/css/jquery.ui.plupload.css" type="text/css" />

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/jquery-ui.min.js"></script>
<!-- <script type="text/javascript" src="http://bp.yahooapis.com/2.4.21/browserplus-min.js"></script> -->

<script type="text/javascript" src="/javascripts/plupload/plupload.js"></script>
<script type="text/javascript" src="/javascripts/plupload/plupload.html5.js"></script>
<script type="text/javascript" src="/javascripts/plupload/plupload.html4.js"></script>
<script type="text/javascript" src="/javascripts/plupload/plupload.flash.js"></script>
<script type="text/javascript" src="/javascripts/plupload/jquery.ui.plupload/jquery.ui.plupload.js"></script>

<style type="text/css">
  .plupload_header {display: none;}
</style>

<fieldset>
    <legend>File Upload Data:</legend>

<%= form_for @stored_file, :url => "/stored_files", :html => {:id => :upload_data} do |f| %>
<%= hidden_field_tag 'temp_batch_id', @temp_batch_id %>

<%= render :partial => "stored_files/form", :locals => { :f => f } %>
<% end %>

    <div id="uploader">
		<p>Failed to initialize the upload tool. Not to point fingers, but perhaps you are using a very old browser that is unsupported?</p>
	</div>

</fieldset>

<script type="text/javascript">

$(function() {

  var UPLOAD = {
    results : [],
    fail : function(file, msg) {
        //console.log(' FAILing()', file);
        this.results.push( { file: file, success: false, message: msg } );
        return false;
    },
    ok : function(file) {
        this.results.push( { file: file, success: true } );
        return true;
    }
  };

(function( $ ){
    $.fn.serializeJSON = function() {
        // Does not support checkboxes
        var json = {};
        jQuery.map($(this).serializeArray(), function(n, i){
            json[n['name']] = n['value'];
        });
        return json;
    };
    //Usage: $('#upload_data').serializeJSON(); 
})( jQuery );


    var track_upload_result = function(file, info_json) {
        // Track each upload result so we can inform the user later
        var result = $.parseJSON( info_json['response'] );
        return result['success'] == 'true' ? UPLOAD.ok(file) : UPLOAD.fail(file, result['message']);
    };

    var mark_failed_upload = function(file, msg) {
        // UI changes to better indicate which uploads failed and why
        var rowId = '#' + file.id;
        $(rowId).removeClass('plupload_done');
        $(rowId).addClass('ui-state-error');
        $(rowId).addClass('plupload_failed');
        //$(rowId).attr('title', 'borkened');

        var iconDiv = $(rowId + '.plupload_done td.plupload_cell div.ui-icon-circle-check');
        $(iconDiv).removeClass('ui-icon-circle-check');
        $(iconDiv).addClass('ui-icon-alert');

        var spanId = rowId + ' td.plupload_cell span';
        $(spanId).text( $(spanId).text() + '  [ERROR: ' + msg + ']' );
    };

    // Events: http://www.plupload.com/example_events.php
    $("#uploader").plupload({
		// General settings
        //multipart_params : //all set in UploadFile preinit event.
        runtimes : 'html5,html4', // 'flash,html5,html4',
		url : '/stored_file/new',
		max_file_size : '2000mb',
		max_file_count: 200,
//		chunk_size : '1mb',
		unique_names : false,
		multiple_queues : true, //allow user to upload multiple times from this single page view
		multipart : true, //Does not work on WebKit using the HTML 5 runtime.
		rename: true,
		flash_swf_url : '/javascripts/plupload/plupload.flash.swf',
//      '_http_accept': 'application/javascript',
//      ' session_key_name ' : encodeURIComponent(' u cookies[session_key_name] ')

        // PreInit events, bound before any internal events
        preinit : {
            Init: function(up, info) {
                //console.log('[Init]', 'Info:', info, 'Features:', up.features);
                $('#uploader_container').attr('title', '');
            },
            UploadFile: function(up, file) {
                // Gets called immediately before a single file is uploaded
                up.settings.url = $('#upload_data').attr('action');
                up.settings.multipart_params = $('#upload_data').serializeJSON(); 
            }
        },
        // Post init events, bound after the internal events
        init : {
            StateChanged: function(up) {
                // Called when the state of the queue is changed
                //console.log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
            },
            FileUploaded: function(up, file, info) {
                // Called when a single file has finished uploading
                //console.log('[FileUploaded] File:', file, "Info:", info);
                return track_upload_result(file, info);
            },
            UploadComplete:  function() { 
                console.log('~~~~~~~~ upload complete ~~~~~~~~');
                for (x in UPLOAD.results) {
                    var result = UPLOAD.results[x];
                    if (!result.success) {
                        mark_failed_upload(result.file, result.message);
                    }
                }
            },
            Error: function(up, args) {
                // Called when a fatal server error has occured
                UPLOAD['uploads_failed'][args.file] = args.message;
                return false;
            }
        }
  	});

//This is one way to bind event handlers to an existing uploader
/*
    var uploader = $('#uploader').plupload('getUploader');
    uploader.bind('StateChanged', function() {...});
*/

});
</script>
</body>
</html>
